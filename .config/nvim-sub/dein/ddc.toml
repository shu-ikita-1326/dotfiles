[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
function! s:pum_set_option() abort
  call pum#set_option(#{
    \   auto_confirm_time: 0,
    \   horizontal_menu: v:false,
    \   max_width: 80,
    \   max_height: (&lines / 3),
    \   use_setline: v:false,
    \   border: 'rounded',
    \   scrollbar_char: '',
    \ })
endfunction
call s:pum_set_option()

autocmd VimResized * call s:pum_set_option()
'''
hook_add = '''
inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
hook_source = '''
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('autoCompleteEvents',
    \ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged', 'CmdlineEnter'])
nnoremap : <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  cnoremap <Nul> <Cmd>call ddc#map#manual_complete()<CR>
  cnoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  cnoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  cnoremap <C-Space>   <Cmd>call ddc#map#manual_complete()<CR>

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>
  silent! cunmap <C-n>
  silent! cunmap <C-p>
  silent! cunmap <C-y>
  silent! cunmap <C-e>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction

call ddc#custom#patch_global('cmdlineSources', {
    \   ':': ['cmdline', 'cmdline-history', 'file', 'around'],
    \   '@': ['cmdline-history', 'input', 'file', 'around'],
    \   '>': ['cmdline-history', 'input', 'file', 'around'],
    \   '/': ['around'],
    \   '?': ['around'],
    \   '-': ['around'],
    \   '=': ['input'],
    \ })

call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'cmdline'])

call ddc#custom#patch_global('sourceOptions', {
		\  '_': {
		\    'matchers': ['matcher_fuzzy'],
		\    'sorters': ['sorter_fuzzy'],
		\    'converters': ['converter_fuzzy'],
		\  },
		\  'around': {'mark': '[around]'},
		\  'nvim-lsp': {'mark': '[Lsp]'},
		\  'cmdline': {'mark': '[cmdline]'},
		\  'file': {
		\    'mark': '[file]',
		\    'isVolatile': v:true,
		\    'minAutoCompleteLength': 1000,
		\    'forceCompletionPattern': '\S/\S*',
		\  },
		\  'cmdline-history': {
		\    'mark': '[history]',
		\    'sorters': [],
		\  },
		\})
'''
hook_add = '''
inoremap <silent> <C-Space> <Cmd>call ddc#map#manual_complete()<CR>
call ddc#enable()
'''
