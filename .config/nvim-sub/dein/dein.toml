[[plugins]]
repo = 'nvim-neo-tree/neo-tree.nvim'
lua_add = 'require("config.neo-tree")'

[[plugins]]
repo = 'EdenEast/nightfox.nvim'
hook_add = '''
colorscheme nightfox
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_add = 'require("config.gitsigns")'

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
lua_add = 'require("config.lualine")'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

[[plugins]]
repo = 'shutils/ChatGPT.nvim'
depends = ['nui.nvim', 'plenary.nvim', 'telescope.nvim']
lua_add = 'require("config.ChatGPT")'

[[plugins]]
repo = 'lambdalisue/gin.vim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'mason.nvim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'mason.nvim'

[[plugins]]
repo = 'williamboman/mason.nvim'
depends = ['mason-lspconfig.nvim', 'nvim-lspconfig']
on_event = 'VimEnter'
lua_post_source = 'require("config.mason")'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
lua_add = 'require("config.treesitter")'
hook_done_update = '''
TSUpdate
'''

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
lua_add = 'require("config.toggleterm")'

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_post_source = '''
g:deol#floating_border='single'
'''
hook_add = '''
nnoremap <Leader>to <Cmd>Deol -split=floating<CR>
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
lua_add = '''
require('nvim-web-devicons').setup({
  strict = true,
  override_by_filename = {
    ["docker-compose.yml"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
    ["docker-compose.yaml"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
    [".dockerignore"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
    ["dockerfile"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
  },
  override_by_extension = {
    ["svg"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Svg",
    },
    ["log"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Log",
    },
    ["txt"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Txt",
    },
  }
})
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'akinsho/bufferline.nvim'
hook_source = '''
set termguicolors
'''
lua_add = '''
require("bufferline").setup({})
'''

[[plugins]]
repo = 'uga-rosa/translate.nvim'
hook_add = '''
nnoremap <Leader>tl V:Translate JA<CR>
nnoremap <Leader>tw viw:Translate JA<CR>
vnoremap <Leader>tl :Translate JA<CR>
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-word'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
on_source = 'ddu.vim'

[[plugins]]
repo = 'tennashi/ddu-source-git'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = '4513ECHO/vim-readme-viewer'
on_source = 'ddu.vim'
hook_add = '''
let g:readme_viewer#plugin_manager = 'dein.vim'
'''

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'uga-rosa/ddu-filter-converter_devicon'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_global({
		\  'ui': 'ff',
		\  'sources': [{'name': 'file_rec', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\      'converters': ['converter_devicon'],
		\    },
		\  },
		\  'kindOptions': {
		\    'file': {
		\      'defaultAction': 'open',
		\    },
		\    'word': {
		\      'defaultAction': 'append',
		\    },
		\    'command_history': {
		\      'defaultAction': 'execute',
		\    },
		\    'git_status': {
		\      'defaultAction': 'open',
		\    },
		\    'git_tag': {
		\      'defaultAction': 'switch',
		\    },
		\    'git_branch': {
		\      'defaultAction': 'switch',
		\    },
		\    'git_working_tree': {
		\      'defaultAction': 'add',
		\    },
		\    'git_index': {
		\      'defaultAction': 'commitAll',
		\    },
		\    'help': {
		\      'defaultAction': 'open',
		\    },
		\    'readme_viewer': {
		\      'defaultAction': 'open',
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:true,
		\      'filterSplitDirection': 'floating',
		\      'split': 'floating',
		\      'filterFloatingPosition': 'top',
		\      'floatingBorder': 'single',
		\      'previewFloating': v:true,
		\      'previewSplit': 'vertical',
		\      'previewFloatingBorder': 'single',
		\      'previewFloatingTitle': 'Preview',
		\      'previewFloatingTitlePos': 'center',
		\      'floatingTitle': 'Result',
		\      'floatingTitlePos': 'center',
		\    },
		\    'filer': {
		\      'split': 'floating',
		\      'filterFloatingPosition': 'top',
		\      'floatingBorder': 'single',
		\      'previewFloating': v:true,
		\      'previewSplit': 'vertical',
		\      'previewFloatingBorder': 'single',
		\      'previewFloatingTitle': 'Preview',
		\      'previewFloatingTitlePos': 'center',
		\      'floatingTitle': 'Result',
		\      'floatingTitlePos': 'center',
		\    },
		\  },
		\})

call ddu#custom#patch_local("files", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'file_rec', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:true,
		\      'winCol': (&columns / 2) - &columns / 3 - 2,
		\      'winRow': 6,
		\      'winWidth': &columns / 3,
		\      'winHeight': &lines - 12,
		\      'previewCol': &columns / 2,
		\      'previewRow': 6,
		\      'previewWidth': &columns / 3,
		\      'previewHeight': &lines - 12,
		\      'autoAction': {
		\        'name': 'preview'
		\      },
		\    },
		\  },
		\})

call ddu#custom#patch_local("history", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'file_old', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:true,
		\      'winCol': (&columns / 2) - &columns / 3 - 2,
		\      'winRow': 6,
		\      'winWidth': &columns / 3,
		\      'winHeight': &lines - 12,
		\      'previewCol': &columns / 2,
		\      'previewRow': 6,
		\      'previewWidth': &columns / 3,
		\      'previewHeight': &lines - 12,
		\      'autoAction': {
		\        'name': 'preview'
		\      },
		\    },
		\  },
		\})

call ddu#custom#patch_local("filer", {
		\  'ui': 'filer',
		\  'sources': [{'name': 'file', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\      'columns': ['filename'],
		\    },
		\  },
		\})

call ddu#custom#patch_local("reg", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'register', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:false,
		\    },
		\  },
		\})

call ddu#custom#patch_local("file_external", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'file_external'}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'sourceParams': {
		\    'file_external': {
		\      'cmd': ['git', 'ls-files', '-m'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:false,
		\      'autoAction': {
		\        'name': 'preview',
		\      },
		\    },
		\  },
		\  'kindParams': {
		\    'file': {
		\      'preview': {
		\        'previewCmds': ['git', 'diff', '%s']
		\      }
		\    }
		\  },
		\})

call ddu#custom#patch_local("buffer", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'buffer', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:false,
		\    },
		\  },
		\})

call ddu#custom#patch_local("help", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'help', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:true,
		\    },
		\  },
		\})

call ddu#custom#patch_local("command_history", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'command_history', 'params': {}}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:true,
		\    },
		\  },
		\})

call ddu#custom#patch_local("git_status", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'git_status'}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:false,
		\    },
		\  },
		\})

call ddu#custom#patch_local("readme_viewer", {
		\  'ui': 'ff',
		\  'sources': [{'name': 'readme_viewer'}],
		\  'sourceOptions': {
		\    '_': {
		\      'matchers': ['matcher_substring'],
		\    },
		\  },
		\  'uiParams': {
		\    'ff': {
		\      'startFilter': v:true,
		\    },
		\  },
		\})

call ddu#custom#patch_local("live_rg", {
		\  'ui': 'ff',
		\  'sources': [{
    \    'name': 'rg',
    \    'options': {
    \      'matchers': [],
    \      'volatile': v:true,
    \    }
    \  }],
		\  'uiParams': {
		\    'ff': {
		\      'ignoreEmpty': v:false,
		\      'autoResize': v:false,
		\      'startFilter': v:true,
		\      'winCol': (&columns / 2) - &columns / 3 - 2,
		\      'winRow': 6,
		\      'winWidth': &columns / 3,
		\      'winHeight': &lines - 12,
		\      'previewCol': &columns / 2,
		\      'previewRow': 6,
		\      'previewWidth': &columns / 3,
		\      'previewHeight': &lines - 12,
		\      'autoAction': {
		\        'name': 'preview'
		\      },
		\    },
		\  },
		\})

nnoremap <silent> <Leader>fe :call ddu#start({ 'name': 'filer' })<CR>
nnoremap <silent> <Leader>ff :call ddu#start({ 'name': 'files' })<CR>
nnoremap <silent> <Leader>h :call ddu#start({ 'name': 'history' })<CR>
nnoremap <silent> <Leader>fr :call ddu#start({ 'name': 'reg' })<CR>
nnoremap <silent> <Leader>gr :call ddu#start({ 'name': 'live_rg' })<CR>
nnoremap <silent> <Leader>fb :call ddu#start({ 'name': 'buffer' })<CR>
nnoremap <silent> <Leader>fh :call ddu#start({ 'name': 'help' })<CR>
nnoremap <silent> <Leader>fc :call ddu#start({ 'name': 'command_history' })<CR>
nnoremap <silent> <Leader>fm :call ddu#start({ 'name': 'readme_viewer' })<CR>
nnoremap <silent> <Leader>gs :call ddu#start({ 'name': 'git_status' })<CR>
nnoremap <silent> <Leader>fx :call ddu#start({ 'name': 'file_external' })<CR>

autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
setlocal cursorline
nnoremap <buffer> <CR>
\ <Cmd>call ddu#ui#do_action('itemAction')<CR>
nnoremap <buffer> i
\ <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
nnoremap <buffer> q
\ <Cmd>call ddu#ui#do_action('quit')<CR>
nnoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR>
nnoremap <buffer> p
\ <Cmd>call ddu#ui#do_action('preview')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
inoremap <buffer> <CR>
\ <Cmd>call ddu#ui#do_action('itemAction')<CR>
inoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR><Esc>
inoremap <buffer> <C-n>
\ <Cmd>call ddu#ui#multi_actions([['cursorNext'], ['preview']])<CR>
inoremap <buffer> <C-p>
\ <Cmd>call ddu#ui#multi_actions([['cursorPrevious'], ['preview']])<CR>
nnoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR><Esc>
nnoremap <buffer> p
\ <Cmd>call ddu#ui#do_action('preview')<CR>
endfunction

autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
nnoremap <buffer> <CR>
\ <Cmd>call ddu#ui#do_action('itemAction')<CR>
nnoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR><Esc>
nnoremap <buffer> p
\ <Cmd>call ddu#ui#do_action('preview')<CR>
nnoremap <buffer> h
\ <Cmd>call ddu#ui#do_action('collapseItem')<CR>
nnoremap <buffer> l
\ <Cmd>call ddu#ui#do_action('expandItem')<CR>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option(#{
    \   auto_confirm_time: 0,
    \   horizontal_menu: v:false,
    \   max_width: 80,
    \   use_setline: v:false,
    \ })
  call pum#set_local_option('c', #{
    \   horizontal_menu: v:false,
    \ })
'''
hook_add = '''
inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
hook_source = '''
call ddc#custom#patch_global('ui', 'pum')
	call ddc#custom#patch_global('autoCompleteEvents',
	\ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged', 'CmdlineEnter'])
	nnoremap :       <Cmd>call CommandlinePre()<CR>:
	
	function! CommandlinePre() abort
	  cnoremap <Nul> <Cmd>call ddc#map#manual_complete()<CR>
	  cnoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
	  cnoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
	  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
	  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
	
	  " Overwrite sources
	  if !exists('b:prev_buffer_config')
	    let b:prev_buffer_config = ddc#custom#get_buffer()
	  endif
	  call ddc#custom#patch_buffer('sources',
          \ ['cmdline', 'cmdline-history', 'around'])
	
	  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
	  autocmd InsertEnter <buffer> ++once call CommandlinePost()
	
	  " Enable command line completion
	call ddc#enable_cmdline_completion()
	endfunction
	function! CommandlinePost() abort
	  silent! cunmap <Tab>
	  silent! cunmap <S-Tab>
	  silent! cunmap <C-n>
	  silent! cunmap <C-p>
	  silent! cunmap <C-y>
	  silent! cunmap <C-e>
	
	  " Restore sources
	  if exists('b:prev_buffer_config')
	    call ddc#custom#set_buffer(b:prev_buffer_config)
	    unlet b:prev_buffer_config
	  else
	    call ddc#custom#set_buffer({})
	  endif
	endfunction
  call ddc#custom#patch_global('cmdlineSources', {
      \   ':': ['cmdline-history', 'cmdline', 'around'],
      \   '@': ['cmdline-history', 'input', 'file', 'around'],
      \   '>': ['cmdline-history', 'input', 'file', 'around'],
      \   '/': ['around', 'line'],
      \   '?': ['around', 'line'],
      \   '-': ['around', 'line'],
      \   '=': ['input'],
      \ })

" Use around source.
" https://github.com/Shougo/ddc-source-around
call ddc#custom#patch_global('sources', ['around', 'nvim-lsp', 'cmdline'])

" Use matcher_head and sorter_rank.
" https://github.com/Shougo/ddc-matcher_head
" https://github.com/Shougo/ddc-sorter_rank
call ddc#custom#patch_global('sourceOptions', {
		\ '_': {
		\   'matchers': ['matcher_fuzzy'],
		\   'sorters': ['sorter_fuzzy'],
		\   'converters': ['converter_fuzzy'],
		\ },
		\ })

" Change source options
call ddc#custom#patch_global('sourceOptions', {
		\ 'around': {'mark': 'A'},
		\ })
call ddc#custom#patch_global('sourceOptions', {
		\ 'nvim-lsp': {'mark': 'Lsp',
		\ }
		\ })
call ddc#custom#patch_global('sourceParams', {
		\ 'around': {'maxSize': 500},
		\ })
call ddc#custom#patch_global('sourceOptions', #{
		\ cmdline: #{
		\ mark: 'cmdline',
		\ },
		\ file: #{
		\   mark: 'F',
		\   isVolatile: v:true,
		\   minAutoCompleteLength: 1000,
		\   forceCompletionPattern: '\S/\S*',
		\ },
		\ cmdline-history: #{
		\   mark: 'history',
		\   sorters: [],
		\ },
		\ input: #{
		\   mark: 'input',
		\   forceCompletionPattern: '\S/\S*',
		\   isVolatile: v:true,
		\   dup: 'force',
		\ },
		\ })

" Customize settings on a filetype
call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around', 'clangd'])
call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
		\ 'clangd': {'mark': 'C'},
		\ })
call ddc#custom#patch_filetype('markdown', 'sourceParams', {
		\ 'around': {'maxSize': 100},
		\ })
'''
hook_add = '''
" Mappings

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

	" Use ddc.
call ddc#enable()
'''
