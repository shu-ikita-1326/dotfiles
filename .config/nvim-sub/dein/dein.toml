[[plugins]]
repo = 'nvim-neo-tree/neo-tree.nvim'
lua_add = 'require("config.neo-tree")'

[[plugins]]
repo = 'EdenEast/nightfox.nvim'
hook_add = '''
colorscheme nightfox
'''

[[plugins]]
repo = 'monaqa/dial.nvim'
lua_add = 'require("config.dial")'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_add = 'require("config.gitsigns")'

[[plugins]]
repo = 'mattn/vim-sonictemplate'
hook_source = '''
let g:sonictemplate_vim_template_dir = '$HOME/.config/template'
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
lua_add = 'require("config.lualine")'

[[plugins]]
repo = 'folke/noice.nvim'
depends = ['nui.nvim', 'nvim-notify']
lua_add = 'require("config.noice")'

[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_add = 'require("config.nvim-notify")'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

[[plugins]]
repo = 'shutils/ChatGPT.nvim'
depends = ['nui.nvim', 'plenary.nvim', 'telescope.nvim']
lua_add = 'require("config.ChatGPT")'

[[plugins]]
repo = 'lambdalisue/gin.vim'

[[plugins]]
repo = 'lambdalisue/mr.vim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'mason.nvim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'mason.nvim'

[[plugins]]
repo = 'williamboman/mason.nvim'
depends = ['mason-lspconfig.nvim', 'nvim-lspconfig']
on_event = 'VimEnter'
lua_post_source = 'require("config.mason")'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
lua_add = 'require("config.treesitter")'
hook_done_update = '''
TSUpdate
'''

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
lua_add = 'require("config.toggleterm")'

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_post_source = '''
g:deol#floating_border='round'
'''
hook_add = '''
nnoremap <Leader>to <Cmd>Deol -split=floating<CR>
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
lua_add = '''
require('nvim-web-devicons').setup({
  strict = true,
  override_by_filename = {
    ["docker-compose.yml"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
    ["docker-compose.yaml"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
    [".dockerignore"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
    ["dockerfile"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Dockerfile",
    },
  },
  override_by_extension = {
    ["svg"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Svg",
    },
    ["log"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Log",
    },
    ["txt"] = {
      icon = "",
      color = "#458ee6",
      cterm_color = "68",
      name = "Txt",
    },
  }
})
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'akinsho/bufferline.nvim'
hook_source = '''
set termguicolors
'''
lua_add = '''
require("config.bufferline")
'''

[[plugins]]
repo = 'uga-rosa/translate.nvim'
hook_add = '''
nnoremap <Leader>tl V:Translate JA<CR>
nnoremap <Leader>tw viw:Translate JA<CR>
vnoremap <Leader>tl :Translate JA<CR>
'''
lua_add = 'require("config.translate")'

[[plugins]]
repo = 'vim-denops/denops.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-word'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-dummy'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-source-jumplist'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kamecha/ddu-filter-converter_highlight'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kuuote/ddu-source-git_diff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kuuote/ddu-source-git_status'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kyoh86/ddu-source-git_log'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-dein_update'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-man'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = '4513ECHO/vim-readme-viewer'
on_source = 'ddu.vim'
hook_add = '''
let g:readme_viewer#plugin_manager = 'dein.vim'
'''

[[plugins]]
repo = '4513ECHO/ddu-source-ghq'

[[plugins]]
repo = '4513ECHO/ddu-source-source'

[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'

[[plugins]]
repo = 'k-ota106/ddu-source-marks'

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'uga-rosa/ddu-filter-converter_devicon'
on_source = 'ddu.vim'

[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-source-nvim-notify'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
highlight DduRed guifg=red
highlight DduLightBlue guifg=lightblue
highlight DduYellow guifg=yellow
highlight DduGreen guifg=green

call ddu#custom#patch_global('columnParams', {
    \  'icon_filename': {
    \    'customFileIcons': {
    \      'lua': { 'icon': '' },
    \      'txt': { 'icon': '' },
    \      'vue': { 'icon': '' },
    \     },
    \    'pathDisplayOption': "relative",
    \   }
    \ })
call ddu#custom#alias('ui', 'ff-ghq', 'ff')

call ddu#custom#patch_global('uiParams', {
		\  'ff': {
		\    'filterSplitDirection': 'floating',
		\    'split': 'floating',
		\    'filterFloatingPosition': 'top',
		\    'floatingBorder': 'single',
		\    'previewFloating': v:true,
		\    'previewSplit': 'vertical',
		\    'previewFloatingBorder': 'single',
		\    'previewFloatingTitle': 'Preview',
		\    'previewFloatingTitlePos': 'center',
		\    'floatingTitle': 'Result',
		\    'floatingTitlePos': 'center',
		\    'autoAction': {
		\      'name': 'preview',
		\    },
		\  },
		\  'ff-ghq': {
		\    'filterSplitDirection': 'floating',
		\    'split': 'floating',
		\    'filterFloatingPosition': 'top',
		\    'floatingBorder': 'single',
		\    'previewFloating': v:true,
		\    'previewSplit': 'vertical',
		\    'previewFloatingBorder': 'single',
		\    'previewFloatingTitle': 'Preview',
		\    'previewFloatingTitlePos': 'center',
		\    'floatingTitle': 'Result',
		\    'floatingTitlePos': 'center',
		\    'autoAction': {
		\      'name': 'preview',
		\      'params': {
		\        'previewCmds': ['onefetch', '%s']
		\      },
		\    },
		\  },
    \ })

function! s:set_size() abort
  let s:winCol = (&columns - (&columns * 0.9)) / 2
  let s:winWidth = &columns * 0.9
  let s:winRow = 6
  let s:winHeight = &lines - 10
  let s:previewCol = &columns / 2
  let s:previewWidth = (&columns * 0.9) / 2 - 1
  let s:previewRow = 7
  let s:previewHeight = &lines - 12
endfunction

function! s:set_layout() abort
call ddu#custom#patch_global('uiParams', {
		\  'ff': {
		\    'winCol': s:winCol,
		\    'winRow': s:winRow,
		\    'winWidth': s:winWidth,
		\    'winHeight': s:winHeight,
		\    'previewCol': s:previewCol,
		\    'previewWidth': s:previewWidth,
		\    'previewRow': s:previewRow,
		\    'previewHeight': s:previewHeight,
		\  },
		\  'filer': {
		\    'winCol': s:winCol,
		\    'winRow': s:winRow,
		\    'winWidth': s:winWidth,
		\    'winHeight': s:winHeight,
		\    'previewCol': s:previewCol,
		\    'previewWidth': s:previewWidth,
		\    'previewRow': s:previewRow,
		\    'previewHeight': s:previewHeight,
		\  },
		\  'ff-ghq': {
		\    'winCol': s:winCol,
		\    'winRow': s:winRow,
		\    'winWidth': s:winWidth,
		\    'winHeight': s:winHeight,
		\    'previewCol': s:previewCol,
		\    'previewWidth': s:previewWidth,
		\    'previewRow': s:previewRow,
		\    'previewHeight': s:previewHeight,
		\  },
    \ })
endfunction

function! s:layout() abort
  call s:set_size()
  call s:set_layout()
endfunction

call s:layout()

autocmd VimResized * call s:layout()

call ddu#custom#patch_global({
    \  'ui': 'ff',
    \  'sources': [{'name': 'file_rec', 'params': {}}],
    \  'sourceParams': {
    \    'file_external': {
    \      'cmd': ['fd', '.', '-H', '-E', '__pycache__', '-t', 'f'],
    \    },
    \  },
    \  'sourceOptions': {
    \    '_': {
    \      'matchers': ['matcher_substring'],
    \    },
    \    'lsp_diagnostic': {
    \      'converters': ['converter_lsp_diagnostic'],
    \    },
    \    'lsp_documentSymbol': {
    \      'converters': ['converter_lsp_symbol'],
    \    },
    \    'lsp_workspaceSymbol': {
    \      'converters': ['converter_lsp_symbol'],
    \    },
    \    'git_status': {
    \      'converters': ['converter_git_status'],
    \    },
    \    'file_rec': {
    \      'columns': ['icon_filename'],
    \    },
    \    'mr': {
    \      'columns': ['icon_filename'],
    \    },
    \  },
    \  'kindOptions': {
    \    'file': {
    \      'defaultAction': 'open',
    \    },
    \    'man': {
    \      'defaultAction': 'open',
    \    },
    \    'word': {
    \      'defaultAction': 'append',
    \    },
    \    'command_history': {
    \      'defaultAction': 'execute',
    \    },
    \    'help': {
    \      'defaultAction': 'open',
    \    },
    \    'readme_viewer': {
    \      'defaultAction': 'open',
    \    },
    \    'git_status': {
    \      'defaultAction': 'open',
    \    },
    \    'ghq': {
    \      'defaultAction': 'open',
    \    },
    \    'lsp': {
    \      'defaultAction': 'open',
    \    },
    \    'lsp_codeAction': {
    \      'defaultAction': 'apply',
    \    },
    \    'action': {
    \      'defaultAction': 'do',
    \    },
    \    'nvim-notify': {
    \      'defaultAction': 'open',
    \    },
    \    'source': {
    \      'defaultAction': 'execute',
    \    },
    \    'colorscheme': {
    \      'defaultAction': 'set',
    \    },
    \    'dein_update': {
    \      'defaultAction': 'viewDiff',
    \    },
    \  },
    \  'actionOptions': {
    \    'echo': {
    \      'quit': v:false,
    \    },
    \    'echoDiff': {
    \      'quit': v:false,
    \    },
    \  },
    \})

call ddu#custom#patch_local("lsp_def", {
		\  'ui': 'ff',
		\  'uiParams': {
		\    'ff': {
		\      'startAutoAction': v:true,
		\      'autoAction': {
		\        'name': 'preview'
		\      },
		\    },
		\  },
		\  'sources': [
		\    {
		\      'name': 'dummy',
		\      'options': {
		\        'converters': [
		\          { 'name': 'converter_highlight', 'params': { 'hl_group': 'DduRed' } },
		\        ],
		\      },
		\      'params': {
		\        'display': '>>Definition<<',
		\      }
		\    },
		\    { 'name': 'lsp_definition', 'params': { 'method': 'textDocument/definition' }},
		\    {
		\      'name': 'dummy',
		\      'options': {
		\        'converters': [
		\          { 'name': 'converter_highlight', 'params': { 'hl_group': 'DduLightBlue' } },
		\        ],
		\      },
		\      'params': {
		\        'display': '>>typeDefinition<<',
		\      },
		\    },
		\    { 'name': 'lsp_definition', 'params': { 'method': 'textDocument/typeDefinition' }},
		\    {
		\      'name': 'dummy',
		\      'options': {
		\        'converters': [
		\          { 'name': 'converter_highlight', 'params': { 'hl_group': 'DduYellow' } },
		\        ],
		\      },
		\      'params': {
		\        'display': '>>declaration<<',
		\      }
		\    },
		\    { 'name': 'lsp_definition', 'params': { 'method': 'textDocument/declaration' }},
		\    {
		\      'name': 'dummy',
		\      'options': {
		\        'converters': [
		\          { 'name': 'converter_highlight', 'params': { 'hl_group': 'DduGreen' } },
		\        ],
		\      },
		\      'params': {
		\        'display': '>>Implementation<<',
		\      }
		\    },
		\    { 'name': 'lsp_definition', 'params': { 'method': 'textDocument/implementation' }},
		\  ],
		\})

call ddu#custom#patch_local("lsp_hie", {
		\  'ui': 'ff',
		\  'uiParams': {
		\    'ff': {
		\      'startAutoAction': v:true,
		\      'autoAction': {
		\        'name': 'preview'
		\      },
		\    },
		\  },
		\  'sources': [
		\    {
		\      'name': 'dummy',
		\      'options': {
		\        'converters': [
		\          { 'name': 'converter_highlight', 'params': { 'hl_group': 'DduRed' } },
		\        ],
		\      },
		\      'params': {
		\        'display': '>>incomingCalls<<',
		\      }
		\    },
		\    { 'name': 'lsp_callHierarchy', 'params': { 'method': 'callHierarchy/incomingCalls' }},
		\    {
		\      'name': 'dummy',
		\      'options': {
		\        'converters': [
		\          { 'name': 'converter_highlight', 'params': { 'hl_group': 'DduLightBlue' } },
		\        ],
		\      },
		\      'params': {
		\        'display': '>>outgoingCalls<<',
		\      }
		\    },
		\    { 'name': 'lsp_callHierarchy', 'params': { 'method': 'callHierarchy/outgoingCalls' }},
		\    {
		\      'name': 'dummy',
		\      'options': {
		\        'converters': [
		\          { 'name': 'converter_highlight', 'params': { 'hl_group': 'DduYellow' } },
		\        ],
		\      },
		\      'params': {
		\        'display': '>>Reference<<',
		\      }
		\    },
		\    { 'name': 'lsp_references' },
		\  ],
		\})

nnoremap <silent> <Leader>ff :Ddu -ui=ff file_external -ui-param-startAutoAction -ui-param-startFilter=v:true<CR>
nnoremap <silent> <Leader>h :Ddu -ui=ff mr -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>fr :Ddu -ui=ff register -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>/ :Ddu -ui=ff rg -source-option-volatile=v:true -ui-param-startAutoAction -ui-param-startFilter=v:true<CR>
nnoremap <silent> <Leader>fb :Ddu -ui=ff buffer -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>fh :Ddu -ui=ff help -ui-param-startAutoAction -ui-param-startFilter=v:true<CR>
nnoremap <silent> <Leader>fc :Ddu -ui=ff command_history<CR>
nnoremap <silent> <Leader>fm :Ddu -ui=ff marks -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>fn :Ddu -ui=ff nvim-notify -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>fj :Ddu -ui=ff jumplist -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>fs :Ddu -ui=ff source -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>gs :Ddu -ui=ff git_status -source-option-path=`expand('%:p')` -source-option-converter='converter_git_status' -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>gd :Ddu -ui=ff git_diff -source-option-path=`expand('%:p')`<CR>
nnoremap <silent> <Leader>gl :Ddu -ui=ff git_log -source-param-showGraph -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>gh :Ddu -ui=ff ghq -ui='ff-ghq' -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>fd :Ddu -ui=ff dein -ui-param-startFilter=v:true<CR>
nnoremap <silent> <Leader>fl :Ddu -ui=ff line -ui-param-startFilter=v:true -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>* :Ddu -ui=ff rg -resume=v:false -ui-param-startAutoAction -ui-param-ignoreEmpty -source-param-input=`('<cword>'->expand())`<CR>
nnoremap <silent> gd :call ddu#start({ 'name': 'lsp_def' })<CR>
nnoremap <silent> gs :call ddu#start({ 'name': 'lsp_hie' })<CR>
nnoremap <silent> ge :Ddu -ui=ff lsp_diagnostic -ui-param-startAutoAction<CR>
nnoremap <silent> <Leader>ca :Ddu -ui=ff lsp_codeAction -ui-param-startAutoAction<CR>
nnoremap <silent> ds :Ddu -ui=ff lsp_documentSymbol -ui-param-startAutoAction<CR>

autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
setlocal cursorline
nnoremap <buffer> <CR>
\ <Cmd>call ddu#ui#do_action('itemAction')<CR>
nnoremap <buffer> i
\ <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
nnoremap <buffer> q
\ <Cmd>call ddu#ui#do_action('quit')<CR>
nnoremap <buffer> a
\ <Cmd>call ddu#ui#do_action('chooseAction')<CR>
nnoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR>
nnoremap <buffer> p
\ <Cmd>call ddu#ui#do_action('togglePreview')<CR>
nnoremap <buffer> <C-t>
\ <Cmd>call ddu#ui#do_action('toggleAutoAction')<CR>
nnoremap <buffer> <C-u>
\ <Cmd>call ddu#ui#do_action('previewExecute', { 'command': "normal! \<C-u>"})<CR>
nnoremap <buffer> <C-d>
\ <Cmd>call ddu#ui#do_action('previewExecute', { 'command': "normal! \<C-d>"})<CR>
nnoremap <buffer> <C-n>
\ <Cmd>call ddu#ui#do_action('previewExecute', { 'command': "normal! \<C-e>"})<CR>
nnoremap <buffer> <C-p>
\ <Cmd>call ddu#ui#do_action('previewExecute', { 'command': "normal! \<C-y>"})<CR>
nnoremap <buffer> L
\ <Cmd>call ddu#ui#do_action('expandItem')<CR>
nnoremap <buffer> H
\ <Cmd>call ddu#ui#do_action('collapseItem')<CR>
nnoremap <buffer> <Tab>
\ <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
nnoremap <buffer> A
\ <Cmd>call ddu#ui#do_action('toggleAllItems')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
inoremap <buffer> <CR>
\ <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR><Esc>
inoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR><Esc>
inoremap <buffer> <C-n>
\ <Cmd>call ddu#ui#do_action('cursorNext')<CR>
inoremap <buffer> <C-p>
\ <Cmd>call ddu#ui#do_action('cursorPrevious')<CR>
inoremap <buffer> <Esc>
\ <Esc><Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
nnoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR><Esc>
nnoremap <buffer> p
\ <Cmd>call ddu#ui#do_action('togglePreview')<CR>
nnoremap <buffer> <C-t>
\ <Cmd>call ddu#ui#do_action('toggleAutoAction')<CR>
endfunction

autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
nnoremap <buffer> <CR>
\ <Cmd>call ddu#ui#do_action('itemAction')<CR>
nnoremap <buffer> <C-c>
\ <Cmd>call ddu#ui#do_action('quit')<CR><Esc>
nnoremap <buffer> p
\ <Cmd>call ddu#ui#do_action('preview')<CR>
nnoremap <buffer> h
\ <Cmd>call ddu#ui#do_action('collapseItem')<CR>
nnoremap <buffer> l
\ <Cmd>call ddu#ui#do_action('expandItem')<CR>
nnoremap <buffer> a
\ <Cmd>call ddu#ui#do_action('chooseAction')<CR>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
function! s:pum_set_option() abort
  call pum#set_option(#{
    \   auto_confirm_time: 0,
    \   horizontal_menu: v:false,
    \   max_width: 80,
    \   max_height: (&lines / 3),
    \   use_setline: v:false,
    \   border: 'rounded',
    \   scrollbar_char: '',
    \ })
endfunction
call s:pum_set_option()

autocmd! VimResized * call s:pum_set_option()
'''
hook_add = '''
inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
hook_source = '''
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('autoCompleteEvents',
    \ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged', 'CmdlineEnter'])
nnoremap : <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  cnoremap <Nul> <Cmd>call ddc#map#manual_complete()<CR>
  cnoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  cnoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  cnoremap <C-Space>   <Cmd>call ddc#map#manual_complete()<CR>

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>
  silent! cunmap <C-n>
  silent! cunmap <C-p>
  silent! cunmap <C-y>
  silent! cunmap <C-e>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction

call ddc#custom#patch_global('cmdlineSources', {
    \   ':': ['cmdline-history', 'cmdline', 'file', 'around'],
    \   '@': ['cmdline-history', 'input', 'file', 'around'],
    \   '>': ['cmdline-history', 'input', 'file', 'around'],
    \   '/': ['around'],
    \   '?': ['around'],
    \   '-': ['around'],
    \   '=': ['input'],
    \ })

call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'cmdline'])

call ddc#custom#patch_global('sourceOptions', {
		\  '_': {
		\    'matchers': ['matcher_fuzzy'],
		\    'sorters': ['sorter_fuzzy'],
		\    'converters': ['converter_fuzzy'],
		\  },
		\  'around': {'mark': '[around]'},
		\  'nvim-lsp': {'mark': '[Lsp]'},
		\  'cmdline': {'mark': '[cmdline]'},
		\  'file': {
		\    'mark': '[file]',
		\    'isVolatile': v:true,
		\    'minAutoCompleteLength': 1000,
		\    'forceCompletionPattern': '\S/\S*',
		\  },
		\  'cmdline-history': {
		\    'mark': '[history]',
		\    'sorters': [],
		\  },
		\})
'''
hook_add = '''
inoremap <silent> <C-Space> <Cmd>call ddc#map#manual_complete()<CR>
call ddc#enable()
'''
